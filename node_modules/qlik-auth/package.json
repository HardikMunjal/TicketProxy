{
  "_args": [
    [
      {
        "raw": "qlik-auth@^1.2.3",
        "scope": null,
        "escapedName": "qlik-auth",
        "name": "qlik-auth",
        "rawSpec": "^1.2.3",
        "spec": ">=1.2.3 <2.0.0",
        "type": "range"
      },
      "/home/hardi/2017/Extractor"
    ]
  ],
  "_from": "qlik-auth@>=1.2.3 <2.0.0",
  "_id": "qlik-auth@1.2.3",
  "_inCache": true,
  "_location": "/qlik-auth",
  "_nodeVersion": "4.2.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/qlik-auth-1.2.3.tgz_1463059513891_0.5161210112273693"
  },
  "_npmUser": {
    "name": "braathen",
    "email": "rikard.braathen@gmail.com"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "qlik-auth@^1.2.3",
    "scope": null,
    "escapedName": "qlik-auth",
    "name": "qlik-auth",
    "rawSpec": "^1.2.3",
    "spec": ">=1.2.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/qlik-auth/-/qlik-auth-1.2.3.tgz",
  "_shasum": "be8cadabf0c904dcc5468b32e1c60a50cee8beba",
  "_shrinkwrap": null,
  "_spec": "qlik-auth@^1.2.3",
  "_where": "/home/hardi/2017/Extractor",
  "author": {
    "name": "Rikard Braathen"
  },
  "bugs": {
    "url": "https://github.com/braathen/qlik-auth/issues"
  },
  "dependencies": {
    "underscore": "^1.8.3",
    "url-join": "^1.1.0"
  },
  "description": "A module for simplyfing custom authentication with the Qlik Sense and QlikView products",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "be8cadabf0c904dcc5468b32e1c60a50cee8beba",
    "tarball": "https://registry.npmjs.org/qlik-auth/-/qlik-auth-1.2.3.tgz"
  },
  "engine": "node >= 0.4.0",
  "gitHead": "e63a0497e94f4b9f18fa3e5813ec35d1a7d3a4dc",
  "homepage": "https://github.com/braathen/qlik-auth",
  "keywords": [
    "qlik",
    "qlikview",
    "sense",
    "ticket",
    "webticket",
    "custom",
    "authentication"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "braathen",
      "email": "rikard.braathen@gmail.com"
    }
  ],
  "name": "qlik-auth",
  "optionalDependencies": {},
  "readme": "WHAT IS QLIK-AUTH?\n\n  qlik-auth is an attempt of simplyfing custom authentication with the Qlik\n  Sense and QlikView products. This module for Node.js takes care of the ticket\n  request and redirection. It allows a developer to focus on obtaining the user\n  profile, provide it in a function call, and the rest will be automated.\n\nREQUIREMENTS\n\n - Node.js (including npm) <https://nodejs.org>\n\nINSTALLATION\n\n    npm install qlik-auth\n\nEXAMPLE\n\n  This is just a minimal example to demonstrate how simple it is to use the\n  module. The code below is from the Node.js website demonstrating how to run\n  a webserver, with code added to handle a ticket request. This should only\n  be seen as a demonstration and a way to get started. Normally you would for\n  want to run the server as HTTPS and so on.\n\n    var http = require('http');\n    var qlikauth = require('qlik-auth');\n    http.createServer(function (req, res) {\n\n      //Define user directory, user identity and attributes\n      var profile = {\n        'UserDirectory': 'QLIK', \n        'UserId': 'rikard',\n        'Attributes': [{'Group': 'ExampleGroup'}]\n      }\n\n      //Make call for ticket request\n      qlikauth.requestTicket(req, res, profile);\n\n    }).listen(1337, '0.0.0.0');\n    console.log('Server running at http://localhost:1337/');\n\nSETUP FOR QLIK SENSE\n\n  Typically a custom authentication module in Qlik Sense would be called\n  through a virtual proxy. Refer to Qlik Sense documentation how to set this\n  up and configure it properly to access your custom built module.\n\n - In the example above a simple webserver is created with Node.js which\n   listens on port 1337. This is the server and port you need to map in the\n   virtual proxy configuration.\n\n - On Windows the module will attempt to use the QlikClient certificate in\n   the Windows Certificate Store. If no certificate is not found it will\n   then look for client.pfx and finally client.pem/client_key.pem in the\n   current path.\n\n - Export the client certificates including the private key from QMC and copy\n   it to the same directory as your script. If it's necessary to provide a\n   password, see the Advanced section below.\n\nADVANCED USAGE\n\n  The module exposes a function called requestTicket which has the following\n  parameters:\n\n    function(req, res, profile, options)\n\n  The profile parameter:\n\n    var profile = {\n      'UserDirectory': 'QLIK', \n      'UserId': 'rikard',\n      'Attributes': []\n    }\n\n  The options parameter:\n\n - In case the certificate is password protected it's possible to provide both\n   the location and filename of the certificate together with a passphrase. It\n   could look like this:\n\n     var options = {\n       'Certificate': './client.pfx',\n       'PassPhrase': ''\n     }\n\n - When Qlik Sense is redirecting to a custom authentication module it passes\n   proxyRestUri and targetId as parameters. These are normally handled by the\n   function automatically, but for scenarios where it might be necessary to\n   redirect to another Identity Provider (IdP) for example, these parameters\n   must be stored away and supplied manually.\n\n     var options = {\n       'ProxyRestUri': session.proxyRestUri,\n       'TargetId': session.targetId\n     }\n\n  Optionally (or actually preferred method) could be to use the builtin\n  init(req, res) function on your index page. This will attempt to save the\n  parameters which the requestTicket function will later automatically pick up.\n\nSETUP FOR QLIKVIEW\n\n  QlikView would need to be configured for using webtickets, this includes\n  changing Windows Authentication to Anonymous Authentication and configuring\n  IP white lists as trust. Please refer to QlikView documentation how to do\n  this.\n\nADVANCED USAGE\n\n  The function to use for QlikView is called requestWebTicket and has the\n  following parameters:\n\n    function(req, res, profile, options)\n\n  Where profile and options looks like this:\n\n     var profile = {\n       'UserDirectory': 'QLIK', \n       'UserId': 'rikard',\n       'Groups': []\n     }\n\n - UserDirectory: A domain prefix in QlikView, but should in most cases match\n   a user directory.\n - UserId: The user identity which will be authenticated in QlikView.\n - Groups: An array of group memberships to include in the ticket request.\n\n     var options = {\n       'Host': 'http://localhost',\n       'TryUrl': '/QlikView',\n       'BackUrl': '',\n       'Document': 'Movies Database'\n     }\n\n - Host: Hostname, default is localhost (include http/https if specified)\n - TryUrl: Where you want to end up after succesfull authentication, in most\n   cases this would be AccessPoint which is the default value.\n - BackUrl: Could be an error page or login page if authentication failed.\n - Document: A QlikView document, if specified it will bypass AccessPoint\n   and go directly to the document.\n",
  "readmeFilename": "README.txt",
  "repository": {
    "type": "git",
    "url": "git://github.com/braathen/qlik-auth.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.2.3"
}
